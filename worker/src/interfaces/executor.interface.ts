import { ExecutionStatus } from '@caidense/reasoning/execution/execution.interface';
import { ExecutionNode } from '@caidense/reasoning/node/node.interface';
import { TaskExecutionContext } from './task.interface';


// Define the expected return structure from an executor's execute method
// This should be consistent with TaskExecutionResult, but perhaps slightly simpler before serialization
export interface ExecutorExecutionResult {
  updatedContext: TaskExecutionContext;
  nextNodeIds: string[]; // Or whatever type is used for next node IDs
  logs?: string[]; // Optional logs generated by the executor
  error?: string; // Optional error message if execution failed within the executor
  // Any other results the orchestrator needs (e.g., a specific return value for decisions)
  returnValue?: any; // For decision nodes, script results etc.
}

/**
 * Interface for all node executor implementations.
 * Each class responsible for executing the logic of a specific node type
 * must implement this interface.
 */
export interface NodeExecutor {
  /**
   * Executes the core logic for a specific type of node.
   * This method should perform the node's intended action (e.g., make an AI call,
   * perform calculation, evaluate condition, run script).
   *
   * Implementations should:
   * 1. Read data from the input 'context' and 'node.config'.
   * 2. Perform the node's specific operation.
   * 3. Update the 'context' (e.g., modify flowVariables, add history entries).
   * 4. Determine the 'nextNodeIds' based on the node's logic and output branches.
   * 5. Return an INodeExecutionOutcome object.
   *
   * @param node The definition of the node instance to execute.
   * @param context The current state of the flow execution.
   * @returns A Promise resolving to the outcome of the execution.
   */
  execute(node: ExecutionNode, context: TaskExecutionContext): Promise<ExecutorExecutionResult>;

  // Note on Node Type Registration:
  // The mapping of a node 'type' string (like 'aiCall') to an ExcutionNode
  // implementation instance is typically done in the NodeExecutorRegistry.
  // Executors often expose the type(s) they handle via a static property, e.g.:
  // static readonly type: string = 'aiCall';
  // or static readonly types: string[] = ['type1', 'type2'];
  // The registry factory/builder reads this static property to build the map.
}

/**
 * Represents a single entry in the execution history, tracking a node's run.
 */
export interface NodeExecutionHistoryEntry {
  /**
   * The unique identifier of the node within the flow definition that was executed.
   */
  nodeId: string;

  /**
   * The type of the node that was executed (e.g., 'aiCall', 'systemLogic:script').
   */
  nodeType: string;

  /**
   * Timestamp when the execution of this node started.
   */
  startTime: Date;

  /**
   * Timestamp when the execution of this node finished.
   */
  endTime: Date; // Should always be set upon completion (success/failure)

  /**
   * The outcome status of this specific node's execution.
   */
  status: ExecutionStatus; // 'skipped' if conditional logic bypassed it

  /**
   * Optional error message if the node execution failed.
   */
  error?: string;

  /**
   * Optional: A string identifier indicating the output branch taken for decision/script nodes.
   * Useful for tracking which path was followed (e.g., 'true', 'false', 'outputName').
   */
  outcome?: string;

  /**
   * Optional: Any specific return value or relevant data produced by the node.
   * Useful for nodes that explicitly return a value (e.g., script result, calculation result).
   */
  returnValue?: any;
}

/**
 * Interface for the payload sent back from the Node Execution Worker Service
 * to the Flow Execution Orchestrator Service via RabbitMQ.
 *
 * This payload contains the outcome of a single node's execution, along with
 * communication-specific details like the correlation ID.
 */
export interface TaskExecutionResult {
// export interface TaskExecutionResult extends ExecutorExecutionResult {
  /**
   * The unique identifier correlating this result back to the original
   * execution task request sent by the orchestrator.
   * This ID is CRITICAL for asynchronous request-response via message queues.
   */
  correlationId: string;
}